CREATE TEMP FUNCTION rejection_rules(arr ANY TYPE) AS (
    (SELECT [
        STRUCT( "RELATIONSHIP_CONSTRAINT" as mdmStage,
                "O campo _orgid não existe na ST mapping." as mdmErrorMsg,
                ((record._orgid is null) or (record._orgid = '')) as mdmActive)
                ,
        STRUCT( "REJECTION_RULE" as mdmStage,
                "O campo docissue é inválido." as mdmErrorMsg,
                (record.docissue is Null) as mdmActive)
                ,
        STRUCT( "RELATIONSHIP_CONSTRAINT" as mdmStage,
                "O campo uuid não existe no DM organization." as mdmErrorMsg,
                (record.uuid is Null) as mdmActive)
                ,
        STRUCT( "RELATIONSHIP_CONSTRAINT" as mdmStage,
                "O campo businesspartner_id não existe no DM mdbusinesspartner." as mdmErrorMsg,
                (record.businesspartner_id is Null) as mdmActive)
    ] FROM UNNEST(arr) AS record)
);

with 
protheus_mapping as (
    SELECT * EXCEPT(ranking) FROM (
      SELECT mdmTenantId, mdmDeleted, company_group, coalesce(company,'') as company, coalesce(unity,'') as unity, branch, uuid, 
        ROW_NUMBER() OVER (PARTITION BY mdmTenantId, company_group, coalesce(company,''), coalesce(unity,''), branch  ORDER BY mdmCounterForEntity DESC, mdmLastUpdated DESC) ranking
      FROM stg_protheus_carol_mapping) WHERE ranking = 1 AND (mdmDeleted = False OR mdmDeleted IS NULL)
),
protheus_sharing as (     
    SELECT mdmTenantId, company_group, 
      (SELECT sharing.branch_code_size FROM UNNEST(arr) AS sharing
        WHERE sharing.table = 'SED') AS sed,
      (SELECT sharing.branch_code_size FROM UNNEST(arr) AS sharing
        WHERE sharing.table = 'SA2') AS sa2
    FROM (
        SELECT mdmTenantId, company_group, ARRAY_AGG(stg) AS arr
        FROM (
          SELECT mdmTenantId, mdmDeleted, company_group, `TABLE`, branch_code_size,
            ROW_NUMBER() OVER (PARTITION BY mdmTenantId, company_group, `TABLE` ORDER BY mdmCounterForEntity DESC, mdmLastUpdated DESC) ranking
          FROM stg_protheus_carol_protheus_sharing
          WHERE `TABLE` IN ('SED','SA2')) stg
        WHERE ranking = 1 AND (mdmDeleted = False OR mdmDeleted IS NULL)
        GROUP BY mdmTenantId, company_group)
),
lookup_organization as (
    SELECT * EXCEPT(ranking) FROM (
      SELECT mdmTenantId, uuid, mdmDeleted,
        ROW_NUMBER() OVER (PARTITION BY mdmTenantId, uuid ORDER BY mdmCounterForEntity DESC, mdmLastUpdated DESC) ranking
      FROM organization) WHERE ranking = 1 AND (mdmDeleted = False OR mdmDeleted IS NULL)
),

lookup_mdbusinesspartner as (
    SELECT * EXCEPT(ranking) FROM (
      SELECT mdmTenantId, businesspartner_id, mdmDeleted,
        ROW_NUMBER() OVER (PARTITION BY mdmTenantId, businesspartner_id ORDER BY mdmCounterForEntity DESC, mdmLastUpdated DESC) ranking
      FROM mdbusinesspartner) WHERE ranking = 1 AND (mdmDeleted = False OR mdmDeleted IS NULL)
),
apinvoice as (
    SELECT 
        stg.mdmTenantId as stgTenantId,
        mapping.uuid as _orgid,
        --`labs-app-mdm-production.a_techfin`.hash( `labs-app-mdm-production.a_techfin`.businesspartner_id_rule(SAFE_CAST(if(trim(stg.company_group) = '', '0', stg.company_group) as int64), stg.company_group, stg.E2_FILIAL, stg.E2_FORNECE, stg.E2_LOJA), "mdbusinesspartner_supplier") as businesspartner_id,
        --`labs-app-mdm-production.a_techfin`.hash( `labs-app-mdm-production.a_techfin`.businesspartner_id_rule(CAST(sharing.sa2 as int64), stg.company_group, stg.E2_FILIAL, stg.E2_FORNECE, stg.E2_LOJA), "mdbusinesspartner_supplier") as businesspartner_id,
        `labs-app-mdm-production.a_techfin`.hash( `labs-app-mdm-production.a_techfin`.businesspartner_id_rule( CAST(sharing.sa2 as int64), 
                                                                                                                stg.company_group, 
                                                                                                                stg.E2_FILIAL, 
                                                                                                                stg.E2_FORNECE, 
                                                                                                                stg.E2_LOJA
                                                                                                              ), 
                                                                                                              "mdbusinesspartner_supplier") as businesspartner_id,
        stg.E2_NUM as docreference,
         `labs-app-mdm-production.a_techfin`.hash(CONCAT(stg.company_group,"|", RTRIM(stg.E2_FILIAL),"|", RTRIM(stg.E2_PREFIXO),"|", RTRIM(stg.E2_NUM),"|", RTRIM(stg.E2_FORNECE), "|", RTRIM(stg.E2_LOJA), "|", RTRIM(stg.E2_TIPO)), "apinvoice") as invoice_id,
        CONCAT(FORMAT_TIMESTAMP("%FT%R:%E3S", TIMESTAMP (DATETIME_ADD( `labs-app-mdm-production.a_techfin`.safe_date_as_datetime("%Y%m%d", stg.E2_EMISSAO), INTERVAL 3 HOUR))), "Z") as docissue,
        CONCAT(stg.company_group, "|", RTRIM(stg.E2_FILIAL),"|", RTRIM(stg.E2_PREFIXO),"|", RTRIM(stg.E2_NUM),"|", RTRIM(stg.E2_FORNECE), "|", RTRIM(stg.E2_LOJA), "|", RTRIM(stg.E2_TIPO)) as erp_id,
        CONCAT(stg.company_group, "|", RTRIM(stg.E2_FILIAL),"|", RTRIM(stg.E2_PREFIXO),"|", RTRIM(stg.E2_NUM),"|", RTRIM(stg.E2_FORNECE), "|", RTRIM(stg.E2_LOJA), "|", RTRIM(stg.E2_TIPO)) as protheus_id, 
        stg.E2_TIPO as transactiontype,
        false as deleted,
         `labs-app-mdm-production.a_techfin`.mdmIdStaging(stg.mdmConnectorId, 'se2_invoice', CONCAT('{"se2_invoice":{"e2_filial":"', (stg.E2_FILIAL), '","e2_fornece":"', (stg.E2_FORNECE), '","e2_loja":"', (stg.E2_LOJA), '","e2_num":"', (stg.E2_NUM), '","e2_prefixo":"', (stg.E2_PREFIXO), '","e2_tipo":"', (stg.E2_TIPO), '","company_group":"', (stg.company_group) ,'"}}')) as mdmStagingRecord
        --metadataNoId--
    from (select * except(ranking) from (select row_number() over (partition by company_group, rtrim(E2_FILIAL), rtrim(E2_FORNECE), rtrim(E2_LOJA), rtrim(E2_NUM), rtrim(E2_PREFIXO), rtrim(E2_TIPO) ORDER BY mdmCounterForEntity DESC) ranking, * from stg_protheus_carol_se2
    --timestamp-- WHERE _ingestionDatetime > SAFE.DATETIME(TIMESTAMP_MICROS(SAFE_CAST({{start_from}} AS INT64)))
    ) where ranking = 1 ) stg
    left join protheus_mapping as mapping
      --on mapping.mdmTenantId = stg.mdmTenantId
        on mapping.company_group = stg.company_group
        and mapping.company = coalesce(stg.company,'')
        and mapping.unity = coalesce(stg.unity,'')
        and mapping.branch = stg.branch
    left join protheus_sharing as sharing
      --on sharing.mdmTenantId = stg.mdmTenantId
        on sharing.company_group = stg.company_group
    WHERE NOT ENDS_WITH(E2_TIPO, '-')
)

SELECT *,
    (EXISTS(SELECT 1 FROM UNNEST(mdmErrors) WHERE mdmActive = true)) AS mdmDeleted
FROM
(
  SELECT dm.* except(mdmStagingRecord, stgTenantId), 
      dm.mdmStagingRecord as __mdmId,
      (rejection_rules(ARRAY((SELECT AS STRUCT
            dm._orgid,
            dm.docissue,
            lko.uuid,
            lkm.businesspartner_id
      )))) AS mdmErrors
  from apinvoice dm 
      left join lookup_organization as lko 
        on lko.uuid = dm._orgid and lko.mdmTenantId = dm.stgTenantId
      left join lookup_mdbusinesspartner as lkm 
        on lkm.businesspartner_id = dm.businesspartner_id and lkm.mdmTenantId = dm.stgTenantId
)